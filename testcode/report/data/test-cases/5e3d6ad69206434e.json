{
  "uid": "5e3d6ad69206434e",
  "name": "test_mul_unusual[mul_unusual_data0]",
  "fullName": "test_calc.TestMul#test_mul_unusual",
  "historyId": "9da6937c0118fc992d54a4fb58bf3495",
  "time": {
    "start": 1597675959421,
    "stop": 1597675959421,
    "duration": 0
  },
  "status": "skipped",
  "statusMessage": "TypeError: can't multiply sequence by non-int of type 'str'",
  "statusTrace": "self = <Hogwarts_pytest_zuoye.testcode.test_calc.TestMul object at 0x000001FEF9737908>, calc_init = <sourcecode.calc_code.Calculator object at 0x000001FEF9737D30>, mul_unusual_data = ['a', 'b', 'c']\n\n    @pytest.mark.xfail(raises=TypeError)\n    def test_mul_unusual(self, calc_init, mul_unusual_data):\n>       result = calc_init.mul(mul_unusual_data[0], mul_unusual_data[0])\n\ntest_calc.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sourcecode.calc_code.Calculator object at 0x000001FEF9737D30>, a = 'a', b = 'a'\n\n    def mul(self, a, b):\n>       return a * b\nE       TypeError: can't multiply sequence by non-int of type 'str'\n\n..\\sourcecode\\calc_code.py:11: TypeError",
  "flaky": false,
  "newFailed": false,
  "beforeStages": [
    {
      "name": "calc_init",
      "time": {
        "start": 1597675959407,
        "stop": 1597675959407,
        "duration": 0
      },
      "status": "passed",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "shouldDisplayMessage": false,
      "attachmentsCount": 0,
      "hasContent": false,
      "stepsCount": 0
    },
    {
      "name": "mul_unusual_data",
      "time": {
        "start": 1597675959420,
        "stop": 1597675959420,
        "duration": 0
      },
      "status": "passed",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "shouldDisplayMessage": false,
      "attachmentsCount": 0,
      "hasContent": false,
      "stepsCount": 0
    }
  ],
  "testStage": {
    "status": "skipped",
    "statusMessage": "TypeError: can't multiply sequence by non-int of type 'str'",
    "statusTrace": "self = <Hogwarts_pytest_zuoye.testcode.test_calc.TestMul object at 0x000001FEF9737908>, calc_init = <sourcecode.calc_code.Calculator object at 0x000001FEF9737D30>, mul_unusual_data = ['a', 'b', 'c']\n\n    @pytest.mark.xfail(raises=TypeError)\n    def test_mul_unusual(self, calc_init, mul_unusual_data):\n>       result = calc_init.mul(mul_unusual_data[0], mul_unusual_data[0])\n\ntest_calc.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sourcecode.calc_code.Calculator object at 0x000001FEF9737D30>, a = 'a', b = 'a'\n\n    def mul(self, a, b):\n>       return a * b\nE       TypeError: can't multiply sequence by non-int of type 'str'\n\n..\\sourcecode\\calc_code.py:11: TypeError",
    "steps": [],
    "attachments": [
      {
        "uid": "2b1689c22d356b3c",
        "name": "stdout",
        "source": "2b1689c22d356b3c.txt",
        "type": "text/plain",
        "size": 19
      }
    ],
    "parameters": [],
    "shouldDisplayMessage": true,
    "attachmentsCount": 1,
    "hasContent": true,
    "stepsCount": 0
  },
  "afterStages": [
    {
      "name": "calc_init::0",
      "time": {
        "start": 1597675959426,
        "stop": 1597675959426,
        "duration": 0
      },
      "status": "passed",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "shouldDisplayMessage": false,
      "attachmentsCount": 0,
      "hasContent": false,
      "stepsCount": 0
    }
  ],
  "labels": [
    {
      "name": "tag",
      "value": "run(order=3)"
    },
    {
      "name": "tag",
      "value": "mul"
    },
    {
      "name": "tag",
      "value": "@pytest.mark.xfail(raises=<class 'TypeError'>)"
    },
    {
      "name": "suite",
      "value": "test_calc"
    },
    {
      "name": "subSuite",
      "value": "TestMul"
    },
    {
      "name": "host",
      "value": "TJ-YF-262JLJ"
    },
    {
      "name": "thread",
      "value": "4968-MainThread"
    },
    {
      "name": "framework",
      "value": "pytest"
    },
    {
      "name": "language",
      "value": "cpython3"
    },
    {
      "name": "package",
      "value": "test_calc"
    },
    {
      "name": "resultFormat",
      "value": "allure2"
    }
  ],
  "parameters": [
    {
      "name": "mul_unusual_data",
      "value": "['a', 'b', 'c']"
    }
  ],
  "links": [],
  "hidden": false,
  "retry": false,
  "extra": {
    "severity": "normal",
    "retries": [],
    "categories": [],
    "tags": [
      "run(order=3)",
      "mul",
      "@pytest.mark.xfail(raises=<class 'TypeError'>)"
    ]
  },
  "source": "5e3d6ad69206434e.json",
  "parameterValues": [
    "['a', 'b', 'c']"
  ]
}